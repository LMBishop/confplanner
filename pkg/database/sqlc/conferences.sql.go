// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: conferences.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createConference = `-- name: CreateConference :one
INSERT INTO conferences (
  url, title, venue, city
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, url, title, venue, city
`

type CreateConferenceParams struct {
	Url   string      `json:"url"`
	Title pgtype.Text `json:"title"`
	Venue pgtype.Text `json:"venue"`
	City  pgtype.Text `json:"city"`
}

func (q *Queries) CreateConference(ctx context.Context, arg CreateConferenceParams) (Conference, error) {
	row := q.db.QueryRow(ctx, createConference,
		arg.Url,
		arg.Title,
		arg.Venue,
		arg.City,
	)
	var i Conference
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Title,
		&i.Venue,
		&i.City,
	)
	return i, err
}

const deleteConference = `-- name: DeleteConference :exec
DELETE FROM conferences
WHERE id = $1
`

func (q *Queries) DeleteConference(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteConference, id)
	return err
}

const getConferences = `-- name: GetConferences :many
SELECT id, url, title, venue, city FROM conferences
`

func (q *Queries) GetConferences(ctx context.Context) ([]Conference, error) {
	rows, err := q.db.Query(ctx, getConferences)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Conference
	for rows.Next() {
		var i Conference
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.Title,
			&i.Venue,
			&i.City,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateConferenceDetails = `-- name: UpdateConferenceDetails :one
UPDATE conferences SET (
  title, venue, city
) = ($2, $3, $4)
WHERE id = $1
RETURNING id, url, title, venue, city
`

type UpdateConferenceDetailsParams struct {
	ID    int32       `json:"id"`
	Title pgtype.Text `json:"title"`
	Venue pgtype.Text `json:"venue"`
	City  pgtype.Text `json:"city"`
}

func (q *Queries) UpdateConferenceDetails(ctx context.Context, arg UpdateConferenceDetailsParams) (Conference, error) {
	row := q.db.QueryRow(ctx, updateConferenceDetails,
		arg.ID,
		arg.Title,
		arg.Venue,
		arg.City,
	)
	var i Conference
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Title,
		&i.Venue,
		&i.City,
	)
	return i, err
}
